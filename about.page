---
title: Panel Image
description: Adds an image field to your page’s control panel.
icon: 'M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z'
color: '#84336f'
image: /lot/x/panel.image/index.png
images:
- /lot/x/panel.image/index.png
- /lot/x/panel.image/index/1.png
author: Taufik Nurrohman
type: Markdown
version: 2.0.0
...

This extension adds a special field to store an image link. It can be displayed as an image uploader field or as a
normal URL field depending on certain conditions.

### Usage

By default, this field stores the image link as an `image` data in the
page file, so you can print out the image link like so in the layout file:

~~~ .html.php
<img alt="" src="<?= $page->image; ?>">
~~~

You can use this data as a place to store your featured image link for generic-type web sites, or to store cover image
on certain layouts that feature cover images, or to store album cover on music-type web sites, or to store video cover
on movie-type web sites, or to be used in any other situation you can imagine.

### Customization

~~~ .php
// Store the image link as `'cover'` data
State::set("x.panel\\.image.key", 'cover');

// Store the image file to `'.\lot\asset\photos'` folder
State::set("x.panel\\.image.folder", LOT . D . 'asset' . D . 'photos');

// Store the image file to `'.\lot\asset\2023\01\04'` folder (assuming today is 2022-01-04)
State::set("x.panel\\.image.folder", LOT . D . 'asset' . D . date('Y/m/d'));

// Store the image file as `'2022-01-04.jpg'` (assuming today is 2022-01-04 and the image file extension is `'jpg'`)
State::set("x.panel\\.image.name", date('Y-m-d'));

// Force user to fill out the image field to be able to submit the form
State::set("x.panel\\.image.vital", true);

// Disable the image field when user is on the tag page
if (0 === strpos($_['path'] . '/', 'tag/')) {
    State::set("x.panel\\.image.active", false);
}

// Remove the image field when user is on the tag page
if (0 === strpos($_['path'] . '/', 'tag/')) {
    State::set("x.panel\\.image.skip", true);
}

// Store the image link as `'avatar'` data when user is on the user page
if (0 === strpos($_['path'] . '/', 'user/')) {
    State::set("x.panel\\.image.key", 'avatar');
    State::set("x.panel\\.image.title", 'Avatar');
}

// Set image maximum width to be exactly 1024 pixels and maximum height to be exactly 768 pixels
// If one of the two exceeds the maximum limit, image cropping task will be performed
State::set("x.panel\\.image.height", 768);
State::set("x.panel\\.image.width", 1024);

// Set image maximum width and height to be 1024 pixels
State::set("x.panel\\.image.fit", 1024);

// Set image maximum width to be 1024 pixels and image maximum height to be 768 pixels
State::set("x.panel\\.image.fit", [1024, 768]); // … or `['height' => 768, 'width' => 1024]`

// Force to store the image as PNG
State::set("x.panel\\.image.x", 'png');
~~~